// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "vegeta-server/models"

// IDispatcher is an autogenerated mock type for the IDispatcher type
type IDispatcher struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: _a0, _a1
func (_m *IDispatcher) Cancel(_a0 string, _a1 bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dispatch provides a mock function with given fields: _a0
func (_m *IDispatcher) Dispatch(_a0 models.AttackParams) (*models.AttackResponse, error) {
	ret := _m.Called(_a0)

	var r0 *models.AttackResponse
	if rf, ok := ret.Get(0).(func(models.AttackParams) *models.AttackResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AttackResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.AttackParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *IDispatcher) Get(_a0 string) (*models.AttackResponse, error) {
	ret := _m.Called(_a0)

	var r0 *models.AttackResponse
	if rf, ok := ret.Get(0).(func(string) *models.AttackResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AttackResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0
func (_m *IDispatcher) List(_a0 models.FilterParams) []*models.AttackResponse {
	ret := _m.Called(_a0)

	var r0 []*models.AttackResponse
	if rf, ok := ret.Get(0).(func(models.FilterParams) []*models.AttackResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.AttackResponse)
		}
	}

	return r0
}

// Run provides a mock function with given fields: _a0
func (_m *IDispatcher) Run(_a0 chan struct{}) {
	_m.Called(_a0)
}
