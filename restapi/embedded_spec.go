// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a RESTful API for the vegeta load-testing utility. Vegeta is a versatile HTTP load testing tool built out of a need to drill HTTP services with a constant request rate.\n",
    "title": "Vegeta REST API",
    "contact": {
      "email": "nitish.malhotra@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/api/v1",
  "paths": {
    "/attack": {
      "get": {
        "tags": [
          "attack"
        ],
        "summary": "Get a list of all attack details",
        "operationId": "getAttacks",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttackResponseList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "attack"
        ],
        "summary": "Attack a target server",
        "operationId": "postAttack",
        "parameters": [
          {
            "description": "Attack specification object. See https://github.com/tsenart/vegeta#attack-command",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attack"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttackResponse"
            }
          }
        }
      }
    },
    "/attack/{attackID}": {
      "get": {
        "tags": [
          "attack"
        ],
        "summary": "Get attack details by ID",
        "operationId": "getAttackByID",
        "parameters": [
          {
            "type": "string",
            "description": "Attack ID",
            "name": "attackID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttackResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/attack/{attackID}/cancel": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "attack"
        ],
        "summary": "Cancel an attack by ID",
        "operationId": "putAttackByIDCancel",
        "parameters": [
          {
            "type": "string",
            "description": "Attack ID",
            "name": "attackID",
            "in": "path",
            "required": true
          },
          {
            "description": "Cancel specification object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cancel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttackResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/report": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Get a list of all reports",
        "operationId": "getReports",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReportResponseList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/report/{attackID}": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Get an attack report by  ID",
        "operationId": "getReportByID",
        "parameters": [
          {
            "type": "string",
            "description": "Attack ID",
            "name": "attackID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReportResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Attack": {
      "type": "object",
      "required": [
        "duration",
        "rate",
        "target"
      ],
      "properties": {
        "body": {
          "description": "Request body encoded as a json string",
          "type": "string"
        },
        "cert": {
          "description": "TLS client PEM encoded certificate base64 encoded",
          "type": "string",
          "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUYyekNDQk1PZ0F3SUJBZ0lRTWo4SGpnd2VYa2J3TUxWSk9OMGJnVEFOQmdrcWhraUc5dzBCQVFzRkFEQ0IKcERFTE1Ba0dBMVVFQmhNQ1ZWTXhIVEFiQmdOVkJBb1RGRk41YldGdWRHVmpJRU52Y25CdmNtRjBhVzl1TVI4dwpIUVlEVlFRTEV4WkdUMUlnVkVWVFZDQlFWVkpRVDFORlV5QlBUa3haTVI4d0hRWURWUVFMRXhaVGVXMWhiblJsCll5QlVjblZ6ZENCT1pYUjNiM0pyTVRRd01nWURWUVFERXl0VGVXMWhiblJsWXlCRGJHRnpjeUF6SUZObFkzVnkKWlNCVFpYSjJaWElnVkVWVFZDQkRRU0F0SUVjME1CNFhEVEUyTURZeU9EQXdNREF3TUZvWERURTRNRFl5T1RJegpOVGsxT1Zvd2daSXhDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJREFwRFlXeHBabTl5Ym1saE1SWXdGQVlEClZRUUhEQTFOYjNWdWRHbGhiaUJXYVdWM01SMHdHd1lEVlFRS0RCUlRlVzFoYm5SbFl5QkRiM0p3YjNKaGRHbHYKYmpFZ01CNEdBMVVFQ3d3WFYxTlRJQzBnVkdWamFHNXBZMkZzSUZOMWNIQnZjblF4RlRBVEJnTlZCQU1NRENvdQpZbUowWlhOMExtNWxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFOcUJLa082CmUvUDcvUGFXRlgyZHQrZHJBS2hBbi9MUkRwNjJFRjQxYU1VL1hZbmxhMThiNUZ6VWMyZGhFbWUxN1Zudjh0WDUKQnJiby8zaHIrZHFQaEpkZnI2TmJVdnZsc0JHVXJscnBlZzFBUkhpdGEyY1BvYjdCRFAyalFvV0R0TTM2cndaQgp2a2d6Nys4QlB2WnFraXdxeVpFZTBoMGw3ZG1Ob3pNdHQ1ODdwZkxieTg2K3RmUjFyTFpIbnh3K0RMZS8rZ3BwClhpSHRUTXZDNm12R21sb3VZbVg5OHBiL2kyUG55WG1vaWloU3FrbndNNzRvTTN6RERHM0x1MHc4eENCQTlaLy8KTjByY1JHU2llYnJuZTAxS2dmb0ZSRVhBTVBMRXlyQzhTMG9zcHVNcTB5Yk1pbjVGcjA3UDZubkMrMUtibHpFTQpMbFJvR1A4cDQ4R2l3OUVDQXdFQUFFWEFNUExFZ2dJVE1Dd0dBMVVkRVFRbE1DT0NFM2QzZHk1emRXSXhMbUppCmRHVnpkQzV1WlhTQ0RDb3VZbUowWkVYQU1QTEVkREFKQmdOVkhSTUVBakFBTUE0R0ExVWREd0VCL3dRRUF3SUYKb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdZUVlEVlIwZ0JGb3dXREJXQmdabgpnUXdCQWdJd1REQWpCZ2dyQmdFRkJRY0NBUllYYUhSMGNITTZMeTlrTG5ONWJXTmlMbU52YlM5amNITXdKUVlJCkt3WUJCUVVIQWdJd0dRd1hhSFIwY0hNNkx5OWtMbk41YldOaUxtTnZiUzl5Y0dFd0h3WURWUjBqQkJnd0ZvQVUKTkk5VXRUOEtIMUs2bkxKbDdicUxDR2NaNEFRd0t3WURWUjBmQkNRd0lqQWdvQjZnSElZYWFIUjBjRG92TDNOegpMbk41YldOaUxtTnZiUzl6Y3k1amNtd3dWd1lJS3dZQkJRVUhBUUVFU3pCSk1COEdDQ3NHQVFVRkJ6QUJoaE5vCmRIUndPaTh2YzNNdWMzbHRZMlF1WTI5dE1DWUdDQ3NHQVFVRkJ6QUNoaHBvZEhSd09pOHZjM011YzNsdFkySXUKWTI5dEwzTnpMbU55ZERBU0JnTXJaVTBFQ3pBSkFnRUNBZ0VBQWdFQU1JR0tCZ29yQmdFRUFkWjVBZ1FDQkh3RQplZ0I0QUhZQXozR0FDb1EwQWpRWW5velNXamNEVXZ1WisyZllEOHR3QjJjNFlnQnFyRmtBQUFGVmwxak1SZ0FBCkJBTUFSekJGQWlCY3RINHJnL3ZkNVVDdG5ZT2FGYVhJNEhKNlM2Qms4VDlHUHBIRU5EUDBOQUloQU5lTy8yK2gKLzFhSnFQT2U1dUdmRHFpcFM1d1dyVVVPYUpwVTlmdUhvREpRTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBdQpRL01mWXJEUVA0UHFuekVVb0FtNndhVloyaG0vM0g4MHNRWERyTjFPNTBaTnZqSE5zanp3ZENFdTFid0ZmYTZiCjBiOFA0eTRuS2E0YU9sMC9tSmxxL0F3ZnJ4MHVDODFVSU1Md21YMm1aNWRiYVhIS0VaaDJ0SENobkR3aFpHUEUKS1ZaSjBLeE9BMTJDVFJNRU9HNVhIVGU3WWwrd09RV204aDBreTBEWStGTVQ1QWdjQ282SU14TWJ5eXhvdFF0RQovOERtd3RaUXl0QTJ5cXRaV3EwNzY1dDZQQ0pTYm5LNnpwMGFMVFN3WVpWaWoxQkNETVlsZWlaY0R2SU42SnYvCkVsbkR3cnhzMUNzTXdoN3pZOHdCOGdjN0dIcTYzQkJXMWhDd3NEeDJndURDRW1iSmEra3R2N0VCejJCZ2lMNlYKWmcrUXFJRnowWVNEUUpmRk1UaQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
        },
        "connections": {
          "description": "Max open idle connections per target host",
          "type": "integer",
          "format": "int32",
          "default": 10000
        },
        "duration": {
          "description": "Duration of the test",
          "type": "string",
          "format": "duration",
          "example": "10s"
        },
        "h2c": {
          "description": "Send HTTP/2 requests without TLS encryption",
          "type": "boolean",
          "default": true
        },
        "headers": {
          "description": "Request headers as a string array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Accept: text/html",
            "Last-Modified: Sat, 29 Dec 2018 07:28:00 GMT"
          ]
        },
        "http2": {
          "description": "Send HTTP/2 requests when supported by the server",
          "type": "boolean",
          "default": true
        },
        "insecure": {
          "description": "Specifies whether to ignore invalid server TLS certificates.",
          "type": "boolean"
        },
        "keepalive": {
          "description": "Specifies whether to reuse TCP connections between HTTP requests.",
          "type": "boolean"
        },
        "key": {
          "description": "TLS cleint PEM encoded private key base64 encoded",
          "type": "string",
          "example": "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRRE5qRnNMN0R5d1A0bm8KaElpZUo4dHBXZHJET3NSVmhKbHV1cEJzdDJIL1RYUVBML2dybVlPMlQwNGlZV0NEb3RzSk95MTU2Zld1WldieApIaElXMmJ3T0d2T2ljRVpBY1c1MDdIMVlTY0hzbHFyMlp2WVB3cENUQmdaMStXTHJjaTRFQ1NpcXFuZXh2V2UvCkhHeXh4YTdnNzNCWHNqeUJxdTF1ZllGdVRlYVdBZmNGRHBpTC84YVVNbVNYZ1FtTUJVc05VclhQVklyOW5kV1QKaU9iNzVUWWM3eHF1YjFpMUFTZFJ5WVczbFlOZzZxZElaL1pWYnVaVXRwZml1L2hMaTloODZLMzZtUExFTFk2WgpvNFVyMUsxNUkyZ3BDYmcxV3dwSDdzenVwUDNpTU9vYUhrQUl5TVhvK1Z2V2RUamZJY0cyaTczWmlSQWY4Z2lECnY1aytsK1g3QWdNQkFBRUNnZ0VBY2cwTEI5YVE1Z3FiYnRUN0tTWlRpNlU3NlUvV1dNMDJoV1luZE90Y0NOamwKS1Bnbzc2aENtUW53Qk11YlRlOHpNakFQejdHdGpKTGZSN0t6dnRJWnNvbnAzWndHbndOUmtyY1Y1Y01uUXl0bQp1VW53QmxhaStiRkNMSHV3RTR4TFZCbnc0cUdyd0llajVUclVaTitYWlYvMktmTFA5L0xydzM4SUxqZ3pWYy9KCnZQeVUrWUhsWWJkMTA0am4xbGlHUkRCWk10cGF0alJ1YmNYeWlzTVFaR294UzVJSWh4N0dYV0ZXd1dJa1RSZ2IKN3VlcnFaR1BRY3oxOXNyVkhySDBnT0MxdElhMXBmaUdBZGs3SDlqZFFGQVJqUVhFcTVzRlcrY2tsdVRPZTZVZQpuTHZlcXdzaUJ6Y2E5ZUdHWnZ4a3N0aERnTUk0SmZzcjl2cTA0WVUrb1FLQmdRRDZtYzFSVUhtVVR2VUJhNmc5CnZNM1V3eHpnNk5zV1lkdytFVForN01QckdxdVhRWXBSeU1yaFFDM0pLUXV3M0hNaHNydjI5RVVXMFgwOTFrWncKd20yOTBlSjlzamovci93YXZPZytWbXEvbWh5STZKMnJxTUF6ZnNYZkRFSlNidUhlRXZGL0FhMG8wZmtMZG5JWAp5SjRsSlBjczBUcERyeS9QcmdGN2R0UUhwUUtCZ1FEUitoQ1RoOWhSWThKTjhpZ1I5ZWZTYzUxa3NIN1NyNlNjCmErZDBJbmJualdrdDFlZ3VKQjBzUmZ6TldWYWR1UzNTRXNuTTl3VlBUazkxY3lib2VwREd0RGxPOTlYSVd4V0UKcjE4aG1WSXV6Sm5oZnlxdHEySzF1OTF0OS9JcGRrU3lURkZQUGZOSUIrMkVJQ3UwbGIrSnBwU3Bvd2lJb1dVeQpYd2ZXNXBYRkh3S0JnQ2Z2a3JTK3FtRmtJODlTSk1HUjhRdFMvS3NxOEo4a2dVQ3k1WWhjbXV4QWw4L0c5aEFLCmU2cGgyK29PekhvbTU0SWJSYkVaUkZsYWtTYmxtdHdsWCsrOEh1Z0JHdXhFVTF5L2RoTlpHakhta1YyUUZIQmkKdUI1OHVYUE9ORk9Hc0IvL3pOUjhvK2U1Ym9MUklXV0E1eExzVFNlclFDbkJKVkZuWFgwYmRyYXhBb0dCQUo4UApTL0ZHRFpLUi9FV3BjN3N2U1QzOXdMUGVreU9zVkFqK0lHVzBHZGlNSWFuTUNVYXlxcnE0QmFuVXpDMU1jcTVZCjl5OWh6RTdvSm43MURQczhwV0V3Y3Qwa0ZuamdycXRGWWM0RTQrRjVzZlBFcmlMQzJsS0tqbEZZYXNRSHlFQTgKV2JlcVdSa3VrRGp2V2N4QlI4ZlJQWHBIZXhadEZFaVUvazVIZkJySEFvR0JBUEo3YlFOV1JEQzlLWVNSaGw4WQpvUzYwT0FFNVZrV29IVzI3N2RDUVU1MEpGL1YreStxRlZkWTBWVjd4MVVlbXVjekRFUFFIUXE5MXMybzRDdCs1CmpSQWcwS2xVRlFjQ0tEK2FCd28rZmZiLzJ6OVlJb1NXT3dsS0VrMWxMcFZ1RGYxU041NlkyQUw5ZGF2bEhCUFAKcTQrZXNwMGp1QkpnekxaeFM1R2l1S3BWCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K"
        },
        "laddr": {
          "description": "Specifies the local IP address to be used.",
          "type": "string",
          "format": "ipv4"
        },
        "max-body": {
          "description": "Specifies the maximum number of bytes to capture from the body of each response. Remaining unread bytes will be fully read but discarded. Set to -1 for no limit.",
          "type": "string",
          "example": "10M"
        },
        "rate": {
          "description": "Specifies the request rate per time unit to issue against the targets. The actual request rate can vary slightly due to things like garbage collection, but overall it should stay very close to the specified. If no time unit is provided, 1s is used.",
          "type": "integer",
          "format": "int",
          "default": 50,
          "example": 50
        },
        "redirects": {
          "description": "Specifies the max number of redirects followed on each request. The default is 10. When the value is -1, redirects are not followed but the response is marked as successful.",
          "type": "integer",
          "format": "int"
        },
        "resolvers": {
          "description": "Specifies custom DNS resolver addresses to use for name resolution instead of the ones configured by the operating system. Works only on non Windows systems.",
          "type": "string"
        },
        "root-certs": {
          "description": "Specifies the trusted TLS root CAs certificate strings as a comma separated list. If unspecified, the default system CAs certificates will be used.",
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/Target"
        },
        "timeout": {
          "description": "Specifies the timeout for each request. The default is 0 which disables timeouts.",
          "type": "string",
          "format": "time",
          "example": "10s"
        },
        "workers": {
          "description": "Specifies the initial number of workers used in the attack. The actual number of workers will increase if necessary in order to sustain the requested rate.",
          "type": "integer",
          "format": "int",
          "default": 10
        }
      }
    },
    "AttackResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The attack ID used to fetch status and reports.",
          "type": "string"
        },
        "status": {
          "description": "The attack status",
          "type": "string",
          "enum": [
            "scheduled",
            "running",
            "canceled",
            "completed",
            "failed"
          ]
        }
      }
    },
    "AttackResponseList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AttackResponse"
      }
    },
    "Cancel": {
      "type": "object",
      "required": [
        "isCanceled"
      ],
      "properties": {
        "isCanceled": {
          "description": "The attack cancel object",
          "type": "boolean"
        }
      }
    },
    "Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Report": {
      "type": "object",
      "properties": {
        "bytes_in": {
          "type": "object",
          "properties": {
            "mean": {
              "type": "integer",
              "format": "int64",
              "example": 45
            },
            "total": {
              "type": "integer",
              "format": "int64",
              "example": 2250
            }
          }
        },
        "bytes_out": {
          "type": "object",
          "properties": {
            "mean": {
              "type": "integer",
              "format": "int64"
            },
            "total": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "example": 9802013000
        },
        "earliest": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "404 Not Found"
          }
        },
        "latencies": {
          "type": "object",
          "properties": {
            "50th": {
              "type": "integer",
              "format": "uint64"
            },
            "95th": {
              "type": "integer",
              "format": "uint64"
            },
            "99th": {
              "type": "integer",
              "format": "uint64"
            },
            "max": {
              "type": "integer",
              "format": "int"
            },
            "mean": {
              "type": "integer",
              "format": "uint64"
            },
            "total": {
              "type": "integer",
              "format": "uint64"
            }
          }
        },
        "latest": {
          "type": "string",
          "format": "date-time"
        },
        "rate": {
          "type": "number",
          "example": 5.1009930307172615
        },
        "requests": {
          "type": "integer",
          "format": "int64",
          "example": 50
        },
        "success": {
          "type": "integer",
          "format": "int",
          "example": 4
        },
        "wait": {
          "type": "integer",
          "format": "int64",
          "example": 372388
        }
      }
    },
    "ReportResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The attack ID used to fetch status and reports.",
          "type": "string",
          "example": "b9ffc008-b5a3-4407-a7b8-c7e8fff24ce2"
        },
        "report": {
          "$ref": "#/definitions/Report"
        }
      }
    },
    "ReportResponseList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ReportResponse"
      }
    },
    "Target": {
      "type": "object",
      "properties": {
        "method": {
          "description": "Method",
          "type": "string",
          "default": "GET",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "HEAD",
            "DELETE"
          ]
        },
        "scheme": {
          "type": "string",
          "default": "http",
          "enum": [
            "http",
            "https"
          ]
        },
        "url": {
          "type": "string",
          "example": "virtserver.swaggerhub.com/api/v1/attack"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Attack endpoints",
      "name": "attack"
    },
    {
      "description": "Result retrieval endpoints",
      "name": "report"
    }
  ],
  "x-components": {
    "requestBodies": {
      "Attack": {
        "description": "Object that needs to be attacked",
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Attack"
        }
      },
      "Cancel": {
        "description": "Cancelation object",
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Cancel"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a RESTful API for the vegeta load-testing utility. Vegeta is a versatile HTTP load testing tool built out of a need to drill HTTP services with a constant request rate.\n",
    "title": "Vegeta REST API",
    "contact": {
      "email": "nitish.malhotra@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/api/v1",
  "paths": {
    "/attack": {
      "get": {
        "tags": [
          "attack"
        ],
        "summary": "Get a list of all attack details",
        "operationId": "getAttacks",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttackResponseList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "attack"
        ],
        "summary": "Attack a target server",
        "operationId": "postAttack",
        "parameters": [
          {
            "description": "Attack specification object. See https://github.com/tsenart/vegeta#attack-command",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attack"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttackResponse"
            }
          }
        }
      }
    },
    "/attack/{attackID}": {
      "get": {
        "tags": [
          "attack"
        ],
        "summary": "Get attack details by ID",
        "operationId": "getAttackByID",
        "parameters": [
          {
            "type": "string",
            "description": "Attack ID",
            "name": "attackID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttackResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/attack/{attackID}/cancel": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "attack"
        ],
        "summary": "Cancel an attack by ID",
        "operationId": "putAttackByIDCancel",
        "parameters": [
          {
            "type": "string",
            "description": "Attack ID",
            "name": "attackID",
            "in": "path",
            "required": true
          },
          {
            "description": "Cancel specification object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cancel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttackResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/report": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Get a list of all reports",
        "operationId": "getReports",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReportResponseList"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/report/{attackID}": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Get an attack report by  ID",
        "operationId": "getReportByID",
        "parameters": [
          {
            "type": "string",
            "description": "Attack ID",
            "name": "attackID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReportResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Attack": {
      "type": "object",
      "required": [
        "duration",
        "rate",
        "target"
      ],
      "properties": {
        "body": {
          "description": "Request body encoded as a json string",
          "type": "string"
        },
        "cert": {
          "description": "TLS client PEM encoded certificate base64 encoded",
          "type": "string",
          "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUYyekNDQk1PZ0F3SUJBZ0lRTWo4SGpnd2VYa2J3TUxWSk9OMGJnVEFOQmdrcWhraUc5dzBCQVFzRkFEQ0IKcERFTE1Ba0dBMVVFQmhNQ1ZWTXhIVEFiQmdOVkJBb1RGRk41YldGdWRHVmpJRU52Y25CdmNtRjBhVzl1TVI4dwpIUVlEVlFRTEV4WkdUMUlnVkVWVFZDQlFWVkpRVDFORlV5QlBUa3haTVI4d0hRWURWUVFMRXhaVGVXMWhiblJsCll5QlVjblZ6ZENCT1pYUjNiM0pyTVRRd01nWURWUVFERXl0VGVXMWhiblJsWXlCRGJHRnpjeUF6SUZObFkzVnkKWlNCVFpYSjJaWElnVkVWVFZDQkRRU0F0SUVjME1CNFhEVEUyTURZeU9EQXdNREF3TUZvWERURTRNRFl5T1RJegpOVGsxT1Zvd2daSXhDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJREFwRFlXeHBabTl5Ym1saE1SWXdGQVlEClZRUUhEQTFOYjNWdWRHbGhiaUJXYVdWM01SMHdHd1lEVlFRS0RCUlRlVzFoYm5SbFl5QkRiM0p3YjNKaGRHbHYKYmpFZ01CNEdBMVVFQ3d3WFYxTlRJQzBnVkdWamFHNXBZMkZzSUZOMWNIQnZjblF4RlRBVEJnTlZCQU1NRENvdQpZbUowWlhOMExtNWxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFOcUJLa082CmUvUDcvUGFXRlgyZHQrZHJBS2hBbi9MUkRwNjJFRjQxYU1VL1hZbmxhMThiNUZ6VWMyZGhFbWUxN1Zudjh0WDUKQnJiby8zaHIrZHFQaEpkZnI2TmJVdnZsc0JHVXJscnBlZzFBUkhpdGEyY1BvYjdCRFAyalFvV0R0TTM2cndaQgp2a2d6Nys4QlB2WnFraXdxeVpFZTBoMGw3ZG1Ob3pNdHQ1ODdwZkxieTg2K3RmUjFyTFpIbnh3K0RMZS8rZ3BwClhpSHRUTXZDNm12R21sb3VZbVg5OHBiL2kyUG55WG1vaWloU3FrbndNNzRvTTN6RERHM0x1MHc4eENCQTlaLy8KTjByY1JHU2llYnJuZTAxS2dmb0ZSRVhBTVBMRXlyQzhTMG9zcHVNcTB5Yk1pbjVGcjA3UDZubkMrMUtibHpFTQpMbFJvR1A4cDQ4R2l3OUVDQXdFQUFFWEFNUExFZ2dJVE1Dd0dBMVVkRVFRbE1DT0NFM2QzZHk1emRXSXhMbUppCmRHVnpkQzV1WlhTQ0RDb3VZbUowWkVYQU1QTEVkREFKQmdOVkhSTUVBakFBTUE0R0ExVWREd0VCL3dRRUF3SUYKb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdZUVlEVlIwZ0JGb3dXREJXQmdabgpnUXdCQWdJd1REQWpCZ2dyQmdFRkJRY0NBUllYYUhSMGNITTZMeTlrTG5ONWJXTmlMbU52YlM5amNITXdKUVlJCkt3WUJCUVVIQWdJd0dRd1hhSFIwY0hNNkx5OWtMbk41YldOaUxtTnZiUzl5Y0dFd0h3WURWUjBqQkJnd0ZvQVUKTkk5VXRUOEtIMUs2bkxKbDdicUxDR2NaNEFRd0t3WURWUjBmQkNRd0lqQWdvQjZnSElZYWFIUjBjRG92TDNOegpMbk41YldOaUxtTnZiUzl6Y3k1amNtd3dWd1lJS3dZQkJRVUhBUUVFU3pCSk1COEdDQ3NHQVFVRkJ6QUJoaE5vCmRIUndPaTh2YzNNdWMzbHRZMlF1WTI5dE1DWUdDQ3NHQVFVRkJ6QUNoaHBvZEhSd09pOHZjM011YzNsdFkySXUKWTI5dEwzTnpMbU55ZERBU0JnTXJaVTBFQ3pBSkFnRUNBZ0VBQWdFQU1JR0tCZ29yQmdFRUFkWjVBZ1FDQkh3RQplZ0I0QUhZQXozR0FDb1EwQWpRWW5velNXamNEVXZ1WisyZllEOHR3QjJjNFlnQnFyRmtBQUFGVmwxak1SZ0FBCkJBTUFSekJGQWlCY3RINHJnL3ZkNVVDdG5ZT2FGYVhJNEhKNlM2Qms4VDlHUHBIRU5EUDBOQUloQU5lTy8yK2gKLzFhSnFQT2U1dUdmRHFpcFM1d1dyVVVPYUpwVTlmdUhvREpRTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBdQpRL01mWXJEUVA0UHFuekVVb0FtNndhVloyaG0vM0g4MHNRWERyTjFPNTBaTnZqSE5zanp3ZENFdTFid0ZmYTZiCjBiOFA0eTRuS2E0YU9sMC9tSmxxL0F3ZnJ4MHVDODFVSU1Md21YMm1aNWRiYVhIS0VaaDJ0SENobkR3aFpHUEUKS1ZaSjBLeE9BMTJDVFJNRU9HNVhIVGU3WWwrd09RV204aDBreTBEWStGTVQ1QWdjQ282SU14TWJ5eXhvdFF0RQovOERtd3RaUXl0QTJ5cXRaV3EwNzY1dDZQQ0pTYm5LNnpwMGFMVFN3WVpWaWoxQkNETVlsZWlaY0R2SU42SnYvCkVsbkR3cnhzMUNzTXdoN3pZOHdCOGdjN0dIcTYzQkJXMWhDd3NEeDJndURDRW1iSmEra3R2N0VCejJCZ2lMNlYKWmcrUXFJRnowWVNEUUpmRk1UaQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
        },
        "connections": {
          "description": "Max open idle connections per target host",
          "type": "integer",
          "format": "int32",
          "default": 10000
        },
        "duration": {
          "description": "Duration of the test",
          "type": "string",
          "format": "duration",
          "example": "10s"
        },
        "h2c": {
          "description": "Send HTTP/2 requests without TLS encryption",
          "type": "boolean",
          "default": true
        },
        "headers": {
          "description": "Request headers as a string array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Accept: text/html",
            "Last-Modified: Sat, 29 Dec 2018 07:28:00 GMT"
          ]
        },
        "http2": {
          "description": "Send HTTP/2 requests when supported by the server",
          "type": "boolean",
          "default": true
        },
        "insecure": {
          "description": "Specifies whether to ignore invalid server TLS certificates.",
          "type": "boolean"
        },
        "keepalive": {
          "description": "Specifies whether to reuse TCP connections between HTTP requests.",
          "type": "boolean"
        },
        "key": {
          "description": "TLS cleint PEM encoded private key base64 encoded",
          "type": "string",
          "example": "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRRE5qRnNMN0R5d1A0bm8KaElpZUo4dHBXZHJET3NSVmhKbHV1cEJzdDJIL1RYUVBML2dybVlPMlQwNGlZV0NEb3RzSk95MTU2Zld1WldieApIaElXMmJ3T0d2T2ljRVpBY1c1MDdIMVlTY0hzbHFyMlp2WVB3cENUQmdaMStXTHJjaTRFQ1NpcXFuZXh2V2UvCkhHeXh4YTdnNzNCWHNqeUJxdTF1ZllGdVRlYVdBZmNGRHBpTC84YVVNbVNYZ1FtTUJVc05VclhQVklyOW5kV1QKaU9iNzVUWWM3eHF1YjFpMUFTZFJ5WVczbFlOZzZxZElaL1pWYnVaVXRwZml1L2hMaTloODZLMzZtUExFTFk2WgpvNFVyMUsxNUkyZ3BDYmcxV3dwSDdzenVwUDNpTU9vYUhrQUl5TVhvK1Z2V2RUamZJY0cyaTczWmlSQWY4Z2lECnY1aytsK1g3QWdNQkFBRUNnZ0VBY2cwTEI5YVE1Z3FiYnRUN0tTWlRpNlU3NlUvV1dNMDJoV1luZE90Y0NOamwKS1Bnbzc2aENtUW53Qk11YlRlOHpNakFQejdHdGpKTGZSN0t6dnRJWnNvbnAzWndHbndOUmtyY1Y1Y01uUXl0bQp1VW53QmxhaStiRkNMSHV3RTR4TFZCbnc0cUdyd0llajVUclVaTitYWlYvMktmTFA5L0xydzM4SUxqZ3pWYy9KCnZQeVUrWUhsWWJkMTA0am4xbGlHUkRCWk10cGF0alJ1YmNYeWlzTVFaR294UzVJSWh4N0dYV0ZXd1dJa1RSZ2IKN3VlcnFaR1BRY3oxOXNyVkhySDBnT0MxdElhMXBmaUdBZGs3SDlqZFFGQVJqUVhFcTVzRlcrY2tsdVRPZTZVZQpuTHZlcXdzaUJ6Y2E5ZUdHWnZ4a3N0aERnTUk0SmZzcjl2cTA0WVUrb1FLQmdRRDZtYzFSVUhtVVR2VUJhNmc5CnZNM1V3eHpnNk5zV1lkdytFVForN01QckdxdVhRWXBSeU1yaFFDM0pLUXV3M0hNaHNydjI5RVVXMFgwOTFrWncKd20yOTBlSjlzamovci93YXZPZytWbXEvbWh5STZKMnJxTUF6ZnNYZkRFSlNidUhlRXZGL0FhMG8wZmtMZG5JWAp5SjRsSlBjczBUcERyeS9QcmdGN2R0UUhwUUtCZ1FEUitoQ1RoOWhSWThKTjhpZ1I5ZWZTYzUxa3NIN1NyNlNjCmErZDBJbmJualdrdDFlZ3VKQjBzUmZ6TldWYWR1UzNTRXNuTTl3VlBUazkxY3lib2VwREd0RGxPOTlYSVd4V0UKcjE4aG1WSXV6Sm5oZnlxdHEySzF1OTF0OS9JcGRrU3lURkZQUGZOSUIrMkVJQ3UwbGIrSnBwU3Bvd2lJb1dVeQpYd2ZXNXBYRkh3S0JnQ2Z2a3JTK3FtRmtJODlTSk1HUjhRdFMvS3NxOEo4a2dVQ3k1WWhjbXV4QWw4L0c5aEFLCmU2cGgyK29PekhvbTU0SWJSYkVaUkZsYWtTYmxtdHdsWCsrOEh1Z0JHdXhFVTF5L2RoTlpHakhta1YyUUZIQmkKdUI1OHVYUE9ORk9Hc0IvL3pOUjhvK2U1Ym9MUklXV0E1eExzVFNlclFDbkJKVkZuWFgwYmRyYXhBb0dCQUo4UApTL0ZHRFpLUi9FV3BjN3N2U1QzOXdMUGVreU9zVkFqK0lHVzBHZGlNSWFuTUNVYXlxcnE0QmFuVXpDMU1jcTVZCjl5OWh6RTdvSm43MURQczhwV0V3Y3Qwa0ZuamdycXRGWWM0RTQrRjVzZlBFcmlMQzJsS0tqbEZZYXNRSHlFQTgKV2JlcVdSa3VrRGp2V2N4QlI4ZlJQWHBIZXhadEZFaVUvazVIZkJySEFvR0JBUEo3YlFOV1JEQzlLWVNSaGw4WQpvUzYwT0FFNVZrV29IVzI3N2RDUVU1MEpGL1YreStxRlZkWTBWVjd4MVVlbXVjekRFUFFIUXE5MXMybzRDdCs1CmpSQWcwS2xVRlFjQ0tEK2FCd28rZmZiLzJ6OVlJb1NXT3dsS0VrMWxMcFZ1RGYxU041NlkyQUw5ZGF2bEhCUFAKcTQrZXNwMGp1QkpnekxaeFM1R2l1S3BWCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K"
        },
        "laddr": {
          "description": "Specifies the local IP address to be used.",
          "type": "string",
          "format": "ipv4"
        },
        "max-body": {
          "description": "Specifies the maximum number of bytes to capture from the body of each response. Remaining unread bytes will be fully read but discarded. Set to -1 for no limit.",
          "type": "string",
          "example": "10M"
        },
        "rate": {
          "description": "Specifies the request rate per time unit to issue against the targets. The actual request rate can vary slightly due to things like garbage collection, but overall it should stay very close to the specified. If no time unit is provided, 1s is used.",
          "type": "integer",
          "format": "int",
          "default": 50,
          "example": 50
        },
        "redirects": {
          "description": "Specifies the max number of redirects followed on each request. The default is 10. When the value is -1, redirects are not followed but the response is marked as successful.",
          "type": "integer",
          "format": "int"
        },
        "resolvers": {
          "description": "Specifies custom DNS resolver addresses to use for name resolution instead of the ones configured by the operating system. Works only on non Windows systems.",
          "type": "string"
        },
        "root-certs": {
          "description": "Specifies the trusted TLS root CAs certificate strings as a comma separated list. If unspecified, the default system CAs certificates will be used.",
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/Target"
        },
        "timeout": {
          "description": "Specifies the timeout for each request. The default is 0 which disables timeouts.",
          "type": "string",
          "format": "time",
          "example": "10s"
        },
        "workers": {
          "description": "Specifies the initial number of workers used in the attack. The actual number of workers will increase if necessary in order to sustain the requested rate.",
          "type": "integer",
          "format": "int",
          "default": 10
        }
      }
    },
    "AttackResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The attack ID used to fetch status and reports.",
          "type": "string"
        },
        "status": {
          "description": "The attack status",
          "type": "string",
          "enum": [
            "scheduled",
            "running",
            "canceled",
            "completed",
            "failed"
          ]
        }
      }
    },
    "AttackResponseList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AttackResponse"
      }
    },
    "Cancel": {
      "type": "object",
      "required": [
        "isCanceled"
      ],
      "properties": {
        "isCanceled": {
          "description": "The attack cancel object",
          "type": "boolean"
        }
      }
    },
    "Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Report": {
      "type": "object",
      "properties": {
        "bytes_in": {
          "type": "object",
          "properties": {
            "mean": {
              "type": "integer",
              "format": "int64",
              "example": 45
            },
            "total": {
              "type": "integer",
              "format": "int64",
              "example": 2250
            }
          }
        },
        "bytes_out": {
          "type": "object",
          "properties": {
            "mean": {
              "type": "integer",
              "format": "int64"
            },
            "total": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "example": 9802013000
        },
        "earliest": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "404 Not Found"
          }
        },
        "latencies": {
          "type": "object",
          "properties": {
            "50th": {
              "type": "integer",
              "format": "uint64"
            },
            "95th": {
              "type": "integer",
              "format": "uint64"
            },
            "99th": {
              "type": "integer",
              "format": "uint64"
            },
            "max": {
              "type": "integer",
              "format": "int"
            },
            "mean": {
              "type": "integer",
              "format": "uint64"
            },
            "total": {
              "type": "integer",
              "format": "uint64"
            }
          }
        },
        "latest": {
          "type": "string",
          "format": "date-time"
        },
        "rate": {
          "type": "number",
          "example": 5.1009930307172615
        },
        "requests": {
          "type": "integer",
          "format": "int64",
          "example": 50
        },
        "success": {
          "type": "integer",
          "format": "int",
          "example": 4
        },
        "wait": {
          "type": "integer",
          "format": "int64",
          "example": 372388
        }
      }
    },
    "ReportResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The attack ID used to fetch status and reports.",
          "type": "string",
          "example": "b9ffc008-b5a3-4407-a7b8-c7e8fff24ce2"
        },
        "report": {
          "$ref": "#/definitions/Report"
        }
      }
    },
    "ReportResponseList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ReportResponse"
      }
    },
    "Target": {
      "type": "object",
      "properties": {
        "method": {
          "description": "Method",
          "type": "string",
          "default": "GET",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "HEAD",
            "DELETE"
          ]
        },
        "scheme": {
          "type": "string",
          "default": "http",
          "enum": [
            "http",
            "https"
          ]
        },
        "url": {
          "type": "string",
          "example": "virtserver.swaggerhub.com/api/v1/attack"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Attack endpoints",
      "name": "attack"
    },
    {
      "description": "Result retrieval endpoints",
      "name": "report"
    }
  ],
  "x-components": {
    "requestBodies": {
      "Attack": {
        "description": "Object that needs to be attacked",
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Attack"
        }
      },
      "Cancel": {
        "description": "Cancelation object",
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Cancel"
        }
      }
    }
  }
}`))
}
